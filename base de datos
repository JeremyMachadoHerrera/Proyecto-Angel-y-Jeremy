-- Eliminar las tablas si ya existen
DROP TABLE IF EXISTS administradores;
DROP TABLE IF EXISTS encargados;
DROP TABLE IF EXISTS usuarios;
DROP TABLE IF EXISTS clientes;
DROP TABLE IF EXISTS trabajadores;

-- Crear la tabla para administradores
CREATE TABLE administradores (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(50),
    apellido VARCHAR(50),
    email VARCHAR(100),
    contraseña VARCHAR(255)  -- Cambiar tamaño para acomodar hash SHA-256
);

-- Crear la tabla para encargados
CREATE TABLE encargados (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(50),
    apellido VARCHAR(50),
    email VARCHAR(100),
    contraseña VARCHAR(255),  -- Cambiar tamaño para acomodar hash SHA-256
    departamento VARCHAR(50)
);

-- Crear la tabla para usuarios
CREATE TABLE usuarios (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(50),
    apellido VARCHAR(50),
    email VARCHAR(100),
    contraseña VARCHAR(255),  -- Cambiar tamaño para acomodar hash SHA-256
    tipo_documento VARCHAR(20),
    numero_documento VARCHAR(20),
    direccion VARCHAR(100),
    telefono VARCHAR(20)
);

-- Crear la tabla para clientes
CREATE TABLE clientes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(50),
    apellido VARCHAR(50),
    email VARCHAR(100),
    tipo_documento VARCHAR(20),
    numero_documento VARCHAR(20),
    direccion VARCHAR(100),
    telefono VARCHAR(20)
);

-- Crear la tabla para trabajadores
CREATE TABLE trabajadores (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(50),
    apellido VARCHAR(50),
    email VARCHAR(100),
    contraseña VARCHAR(255),  -- Cambiar tamaño para acomodar hash SHA-256
    tipo_documento VARCHAR(20),
    numero_documento VARCHAR(20),
    direccion VARCHAR(100),
    telefono VARCHAR(20),
    puesto VARCHAR(50),
    salario DECIMAL(10, 2),
    fecha_contratacion DATE
);

-- Trigger para encriptar contraseñas antes de insertar en administradores
DELIMITER $$
CREATE TRIGGER before_insert_administradores
BEFORE INSERT ON administradores
FOR EACH ROW
BEGIN
    SET NEW.contraseña = SHA2(NEW.contraseña, 256);
END$$
DELIMITER ;

-- Trigger para encriptar contraseñas antes de actualizar en administradores
DELIMITER $$
CREATE TRIGGER before_update_administradores
BEFORE UPDATE ON administradores
FOR EACH ROW
BEGIN
    IF OLD.contraseña != NEW.contraseña THEN
        SET NEW.contraseña = SHA2(NEW.contraseña, 256);
    END IF;
END$$
DELIMITER ;

-- Trigger para encriptar contraseñas antes de insertar en encargados
DELIMITER $$
CREATE TRIGGER before_insert_encargados
BEFORE INSERT ON encargados
FOR EACH ROW
BEGIN
    SET NEW.contraseña = SHA2(NEW.contraseña, 256);
END$$
DELIMITER ;

-- Trigger para encriptar contraseñas antes de actualizar en encargados
DELIMITER $$
CREATE TRIGGER before_update_encargados
BEFORE UPDATE ON encargados
FOR EACH ROW
BEGIN
    IF OLD.contraseña != NEW.contraseña THEN
        SET NEW.contraseña = SHA2(NEW.contraseña, 256);
    END IF;
END$$
DELIMITER ;

-- Trigger para encriptar contraseñas antes de insertar en usuarios
DELIMITER $$
CREATE TRIGGER before_insert_usuarios
BEFORE INSERT ON usuarios
FOR EACH ROW
BEGIN
    SET NEW.contraseña = SHA2(NEW.contraseña, 256);
END$$
DELIMITER ;

-- Trigger para encriptar contraseñas antes de actualizar en usuarios
DELIMITER $$
CREATE TRIGGER before_update_usuarios
BEFORE UPDATE ON usuarios
FOR EACH ROW
BEGIN
    IF OLD.contraseña != NEW.contraseña THEN
        SET NEW.contraseña = SHA2(NEW.contraseña, 256);
    END IF;
END$$
DELIMITER ;

-- Trigger para encriptar contraseñas antes de insertar en trabajadores
DELIMITER $$
CREATE TRIGGER before_insert_trabajadores
BEFORE INSERT ON trabajadores
FOR EACH ROW
BEGIN
    SET NEW.contraseña = SHA2(NEW.contraseña, 256);
END$$
DELIMITER ;

-- Trigger para encriptar contraseñas antes de actualizar en trabajadores
DELIMITER $$
CREATE TRIGGER before_update_trabajadores
BEFORE UPDATE ON trabajadores
FOR EACH ROW
BEGIN
    IF OLD.contraseña != NEW.contraseña THEN
        SET NEW.contraseña = SHA2(NEW.contraseña, 256);
    END IF;
END$$
DELIMITER ;
